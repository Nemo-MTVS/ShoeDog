package com.dao;

import com.config.JDBCConnection;
import com.model.Stock;
import org.junit.jupiter.api.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class StockDaoTest {
    private static Connection connection;
    private static StockDao stockDao;

    @BeforeAll
    static void setUp() {
        try {
            connection = JDBCConnection.getConnection();
            stockDao = new StockDao(connection);
            // Insert test data
            insertTestData();
        } catch (SQLException e) {
            e.printStackTrace();
            fail("Failed to set up test database connection");
        }
    }

    private static void insertTestData() throws SQLException {
        // First clear any existing data
        clearTestData();
        
        // Insert test model
        String insertModel = "INSERT INTO model (model_id, modelname, brandname, listprice, description) VALUES (1, 'TestShoe', 'TestBrand', 100, 'Test Description')";
        
        // Insert test color
        String insertColor = "INSERT INTO color (color_id, color) VALUES (1, 'Red')";
        
        // Insert test size
        String insertSize = "INSERT INTO sizes (size_id, size) VALUES (1, 250)";
        
        // Insert test stock
        String insertStock = "INSERT INTO stock (id, model_id, color_id, size_id, quantity) VALUES (1, 1, 1, 1, 10)";
        
        try (PreparedStatement psModel = connection.prepareStatement(insertModel);
             PreparedStatement psColor = connection.prepareStatement(insertColor);
             PreparedStatement psSize = connection.prepareStatement(insertSize);
             PreparedStatement psStock = connection.prepareStatement(insertStock)) {
            
            psModel.executeUpdate();
            psColor.executeUpdate();
            psSize.executeUpdate();
            psStock.executeUpdate();
        }
    }

    private static void clearTestData() throws SQLException {
        // Delete in reverse order of foreign key dependencies
        String[] deleteStatements = {
            "DELETE FROM stock",
            "DELETE FROM model",
            "DELETE FROM color",
            "DELETE FROM sizes"
        };
        
        for (String sql : deleteStatements) {
            try (PreparedStatement ps = connection.prepareStatement(sql)) {
                ps.executeUpdate();
            }
        }
    }

    @Test
    @Order(1)
    void getAllStocks_ShouldReturnAllStocks() throws SQLException {
        // When
        List<Stock> stocks = stockDao.getAllStocks();
        
        // Then
        assertNotNull(stocks, "Stock list should not be null");
        assertFalse(stocks.isEmpty(), "Stock list should not be empty");
        assertEquals(1, stocks.size(), "Should have one test stock");
        
        Stock stock = stocks.get(0);
        assertEquals(1, stock.getId(), "Stock ID should match");
        assertEquals(1, stock.getModelId(), "Model ID should match");
        assertEquals(1, stock.getColorId(), "Color ID should match");
        assertEquals(1, stock.getSizeId(), "Size ID should match");
        assertEquals(10, stock.getQuantity(), "Stock quantity should match");
    }

    @Test
    @Order(2)
    void getStockById_WithValidId_ShouldReturnStock() throws SQLException {
        // When
        Stock stock = stockDao.getStockById(1);
        
        // Then
        assertNotNull(stock, "Stock should not be null");
        assertEquals(1, stock.getId(), "Stock ID should match");
        assertEquals(1, stock.getModelId(), "Model ID should match");
        assertEquals(1, stock.getColorId(), "Color ID should match");
        assertEquals(1, stock.getSizeId(), "Size ID should match");
        assertEquals(10, stock.getQuantity(), "Stock quantity should match");
    }

    @Test
    @Order(3)
    void getStockById_WithInvalidId_ShouldReturnNull() throws SQLException {
        // When
        Stock stock = stockDao.getStockById(999);
        
        // Then
        assertNull(stock, "Stock should be null for invalid ID");
    }

    @Test
    @Order(4)
    void getStocksByModelId_ShouldReturnMatchingStocks() throws SQLException {
        // When
        List<Stock> stocks = stockDao.getStocksByModelId(1);
        
        // Then
        assertNotNull(stocks, "Stock list should not be null");
        assertFalse(stocks.isEmpty(), "Stock list should not be empty");
        assertEquals(1, stocks.size(), "Should have one stock for model ID 1");
        
        Stock stock = stocks.get(0);
        assertEquals(1, stock.getModelId(), "Model ID should match");
    }

    @Test
    @Order(5)
    void insertStock_ShouldAddNewStock() throws SQLException {
        // Given
        Stock newStock = new Stock(0, 1, 1, 1, 5); // ID will be generated by DB
        
        // When
        stockDao.insertStock(newStock);
        
        // Then
        List<Stock> stocks = stockDao.getAllStocks();
        assertEquals(2, stocks.size(), "Should have two stocks after insertion");
        assertTrue(stocks.stream().anyMatch(s -> s.getQuantity() == 5), "New stock with quantity 5 should exist");
    }

    @Test
    @Order(6)
    void updateStock_ShouldModifyExistingStock() throws SQLException {
        // Given
        Stock stock = stockDao.getStockById(1);
        stock.setQuantity(15);
        
        // When
        boolean updated = stockDao.updateStock(stock);
        
        // Then
        assertTrue(updated, "Update should return true");
        Stock updatedStock = stockDao.getStockById(1);
        assertEquals(15, updatedStock.getQuantity(), "Quantity should be updated to 15");
    }

    @Test
    @Order(7)
    void updateStockQuantity_ShouldModifyOnlyQuantity() throws SQLException {
        // When
        boolean updated = stockDao.updateStockQuantity(1, 20);
        
        // Then
        assertTrue(updated, "Update should return true");
        Stock updatedStock = stockDao.getStockById(1);
        assertEquals(20, updatedStock.getQuantity(), "Quantity should be updated to 20");
        // Other fields should remain unchanged
        assertEquals(1, updatedStock.getModelId(), "Model ID should remain unchanged");
        assertEquals(1, updatedStock.getColorId(), "Color ID should remain unchanged");
        assertEquals(1, updatedStock.getSizeId(), "Size ID should remain unchanged");
    }

    @AfterAll
    static void tearDown() {
        try {
            clearTestData();
            JDBCConnection.close();
        } catch (SQLException e) {
            e.printStackTrace();
            fail("Failed to clean up test database");
        }
    }
}
